cmake_minimum_required(VERSION 3.1)
if (DEFINED ENV{VERSION})
    project(template VERSION $ENV{VERSION})
else()
    execute_process(COMMAND bash -c "git describe --abbrev=0 --tag | cut -d 'v' -f 2" OUTPUT_VARIABLE PROJECT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
    project(template VERSION ${PROJECT_VERSION})
endif()

set(THREADS_PREFER_PTHREAD_FLAG ON)

add_definitions(-std=c++1z -Wall -Wextra -fext-numeric-literals -DSPDLOG_ENABLE_SYSLOG)
option(GDB "add debug symbol for gdb" OFF)
if (GDB)
    add_definitions(-g -O)
    message("add debug symbol for gdb")
endif()
unset(GDB CACHE)

option(TEMPLATE_TEST "build test" ON)
if(TEMPLATE_TEST)
    message("tests are going to be build as well")
else()
    message("ignore building tests")
endif()

find_package(Threads REQUIRED)
find_package(Boost COMPONENTS system thread REQUIRED)
set(DEPS_DIR ${CMAKE_BINARY_DIR}/tmp CACHE STRING "Dependency directory")
get_filename_component(DEPS_DIR ${DEPS_DIR} REALPATH BASE_DIR ${CMAKE_BINARAY_DIR})
execute_process(COMMAND date OUTPUT_VARIABLE BUILD_TIME_STRING OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND python -c "import platform;print(platform.linux_distribution()[0])" OUTPUT_VARIABLE LINUX_NAME OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND python -c "import platform;print(platform.linux_distribution()[1])" OUTPUT_VARIABLE LINUX_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/generated)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/build.hpp.in ${CMAKE_BINARY_DIR}/generated/build.hpp)
include_directories(${CMAKE_BINARY_DIR}/generated)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/submodules/spdlog/include)
include_directories(${DEPS_DIR}/include)
link_directories(${DEPS_DIR}/lib)

file(GLOB_RECURSE sources ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)
add_executable(template ${sources})
target_link_libraries(template Threads::Threads)
target_link_libraries(template Boost::system)
target_link_libraries(template spdlog)

set(SPDLOG_BUILD_TESTING OFF CACHE BOOL "Build spdlog tests" FORCE)
set(SPDLOG_ENABLE_SYSLOG ON CACHE BOOL "Enable syslog in spdlog" FORCE)

add_subdirectory(submodules/spdlog)

if(TEMPLATE_TEST)
    add_subdirectory(test)
endif()
